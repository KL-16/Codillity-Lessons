// you can use includes, for example:
// #include <algorithm>
#include <stack>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;

int solution(string &S) {
    // Implement your solution here
    if (S.empty()) {
        return 1;
    } else if(S.size() < 2) {
        return 0;
    }
    stack<int> parathesisStack;
    stack<int> bracketStack;
    stack<int> curlyStack;
    for(int i = 0; i < S.size(); i++) {
        switch (S[i]) {
            case '(':
            parathesisStack.push(S[i]);
            break;

            case ')':
            if (parathesisStack.empty()) {
                return 0;
            } else {
                if(S[i - 1] != '[' && S[i - 1] != '{') {
                    parathesisStack.pop();
                } else {
                    return 0;
                } 
            }
            break;

            case '[':
            bracketStack.push(S[i]);
            break;

            case ']':
            if (bracketStack.empty()) {
                return 0;
            } else {
                if(S[i - 1] != '(' && S[i - 1] != '{') {
                    bracketStack.pop();
                } else {
                    return 0;
                }
            }
            break;

            case '{':
            curlyStack.push(S[i]);
            break;

            case '}':
            if (curlyStack.empty()) {
                return 0;
            } else {
                if(S[i - 1] != '[' && S[i - 1] != '(') {
                    curlyStack.pop();
                } else {
                    return 0;
                }
            }
            break;
        }
    }
    if (parathesisStack.empty() && bracketStack.empty() && curlyStack.empty()) {
        return 1;
    } else {
        return 0;
    }
}