// you can use includes, for example:
#include <algorithm>

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;

int solution(vector<int> &A) {
    // Implement your solution here
    if (A.size() < 2) {
        return 0;
    }
    vector<long> openingCircles;
    vector<long> closingCircles;
    for (int i = 0; i < A.size(); i++) {
        openingCircles.push_back((long)i - A[i]);
        closingCircles.push_back((long)i + A[i]);
    }
    sort(openingCircles.begin(), openingCircles.end());
    sort(closingCircles.begin(), closingCircles.end());
    int intersections = 0;
    int openedDiscs = 0;
    int closedDiscsIndex = 0;
    for (int i = 0; i < openingCircles.size(); i++) {
        if (openingCircles[i] <= closingCircles[closedDiscsIndex]) {
            intersections += openedDiscs;
            openedDiscs++;
        } else {
            openedDiscs--;
            closedDiscsIndex++;
            intersections += openedDiscs;
        }
        cout << "openingCircles[i]: " << openingCircles[i] << endl;
        cout << "closingCircles[closedDiscsIndex]: " << closingCircles[closedDiscsIndex] << endl;
        cout << "closedDiscsIndex: " << closedDiscsIndex << endl;
        cout << "opened discs: " << openedDiscs << endl;
        cout << "i: " << i << endl;
        cout << "intersections: " << intersections << endl;
        cout << ">>>>>>>>>>>>>>>>>>>>>" << endl;
    }
    return intersections;
}